// author: Hans D. Escobar H. (hdescobarh)
/*
Reto Mouredev #42: Punto de encuentro
 Crea una funci√≥n que calcule el punto de encuentro de dos objetos en movimiento
 en dos dimensiones.
 - Cada objeto est√° compuesto por una coordenada xy y una velocidad de desplazamiento
   (vector de desplazamiento) por unidad de tiempo (tambi√©n en formato xy).
 - La funci√≥n recibir√° las coordenadas de inicio de ambos objetos y sus velocidades.
 - La funci√≥n calcular√° y mostrar√° el punto en el que se encuentran y el tiempo que tardarn en lograrlo.
 - La funci√≥n debe tener en cuenta que los objetos pueden no llegar a encontrarse.
 */

/*La l√≥gica de la soluci√≥n es la siguiente. S√≠ los dos objetos se encuentran, necesariamente
existe un tiempo ùòµ ‚â• 0 tal que la distancia eucl√≠dea entre las posiciones de los dos objetos es cero */

#![crate_name = "punto_de_encuentro"]
use std::ops::{Mul, Sub};

// Par√°metro introducido para controlar el impacto de errores de redondeo en valores cercanos al cero
// para mis informaci√≥n: https://en.wikipedia.org/wiki/Catastrophic_cancellation
pub const TOLERANCE: f64 = 1E-10_f64;

/// Representa una entidad arbitraria en un espacio vectorial ‚Ñù¬≤
pub struct Object2D {
    /// Vector posici√≥n ùóΩ.
    location: Vector2D,
    /// Vector velocidad ùêØ. Es decir, desplazamiento (ùóΩ(ùòµ+ùëñ) - ùóΩ(ùòµ)) por unidad de tiempo ùëñ
    velocity: Vector2D,
}

impl Object2D {
    /// Retorna una entidad en un espacio vectorial ‚Ñù¬≤
    ///
    /// # Argumentos:
    ///
    /// * `location` - La posici√≥n actual del objeto (x,y)
    /// * `velocity` - La velocidad (x,y) con la que se mueve el objeto
    pub fn new(location: &[f64; 2], velocity: &[f64; 2]) -> Self {
        Self {
            location: Vector2D::from(location),
            velocity: Vector2D::from(velocity),
        }
    }
}

impl UniformLinearMotion for Object2D {
    /// Retorna el tiempo dentro del cual el objeto va a colisionar con otro objeto.
    /// Retorna None s√≠ nunca se encuentran.
    ///
    /// # Argumentos:
    ///
    /// * `other` - El segundo objeto con el que se evaluara la colisi√≥n
    ///
    /// # Ejemplo:
    ///
    /// ```
    /// use punto_de_encuentro::*;
    /// let object_1 = Object2D::new(&[6.0, 7.0], &[-1.8, -0.6]);
    /// let object_2 = Object2D::new(&[2.0, 2.0], &[-1.0, 0.4]);
    /// let time: f64 = object_1.ulm_collision_time(&object_2).unwrap();
    /// assert!((5.0-time).abs() < TOLERANCE);
    /// ```
    ///
    /// # Explicaci√≥n de la f√≠sica:
    ///
    /// S√≠ los dos objetos se encuentran, necesariamente existe un tiempo ùòµ,
    /// tal que la distancia eucl√≠dea ùìì(a,b) = ‚Äña-b‚Äñ entre las posiciones ùóΩ y ùóΩ'
    /// del primer y segundo objeto, respectivamente, es cero; es decir:
    ///
    /// * (1)    ‚àÉùòµ‚ÄñùóΩ(ùòµ)-ùóΩ'(ùòµ)‚Äñ = ‚ÄñŒîùóΩ(ùòµ)‚Äñ = 0
    ///
    /// En movimiento linear uniforme, la velocidad ùêØ es constante para todo tiempo ùòµ; por lo tanto:
    /// * (2)    ùóΩ(ùòµ) = ùóΩ‚ÇÄ + ùòµùêØ
    ///
    /// Por (1) y (2), y por propiedades del producto punto ‚ü®¬∑,¬∑‚ü©:
    /// * (3)    ‚ü®ŒîùóΩ(ùòµ), ŒîùóΩ(ùòµ)‚ü© = ùòµ¬≤ ‚ü®ŒîùêØ,ŒîùêØ‚ü© + ùòµ 2‚ü®ŒîùêØ,ŒîùóΩ‚ÇÄ‚ü© + ‚ü®ŒîùóΩ‚ÇÄ,ŒîùóΩ‚ÇÄ‚ü© = 0
    ///
    fn ulm_collision_time(&self, other: &Self) -> Option<f64> {
        // obtenemos ŒîùóΩ‚ÇÄ y ŒîùêØ
        let delta_initial_position: Vector2D = self.location - other.location;
        let delta_velocity: Vector2D = self.velocity - other.velocity;
        // Es un polinomio de la forma ax¬≤ + bx + c, donde a=‚ü®ŒîùêØ,ŒîùêØ‚ü©, b=2‚ü®ŒîùêØ,ŒîùóΩ‚ÇÄ‚ü©, c=‚ü®ŒîùóΩ‚ÇÄ,ŒîùóΩ‚ÇÄ‚ü©
        let a: f64 = delta_velocity * delta_velocity;
        let b: f64 = delta_velocity * delta_initial_position * 2.0;
        let c: f64 = delta_initial_position * delta_initial_position;
        // s√≠ ambos objetos llevan la misma velocidad, a=0 y b=0. El problema es lineal 0x + c = 0
        if a.abs() < TOLERANCE {
            // s√≠ parten de la misma posici√≥n, c=0. Hay infinitas soluciones: ‚àÄx(0x = 0)
            if c.abs() < TOLERANCE {
                return Some(0.0);
            // s√≠ por el contrario, c‚â†0. No hay soluci√≥n: ‚àÑx(0x = c)
            } else {
                return None;
            }
        }
        // Cuando a‚â†0 es un problema cuadr√°tico y aplicamos
        // la formula cuadr√°tica: ( -b +- sqrt(b¬≤ - 4 ac) ) / (2a),

        let mut discriminant = (b * b) - (4.0 * a * c);
        if discriminant.abs() < TOLERANCE {
            discriminant = 0.0;
        }
        // s√≠ tiene soluci√≥n en los reales, necesariamente b¬≤ - 4ac ‚âß 0
        if discriminant < 0.0_f64 {
            return None;
        }
        let sqrt_discriminant = discriminant.sqrt();
        let solution_1 = (-b - sqrt_discriminant) / (2.0 * a);
        let solution_2 = (-b + sqrt_discriminant) / (2.0 * a);
        // es movimiento rectil√≠neo uniforme en un espacio eucl√≠dea; por lo tanto,
        // a lo sumo existe solo una soluci√≥n
        if solution_1 >= 0.0_f64 {
            Some(solution_1)
        } else if solution_2 > 0.0_f64 {
            Some(solution_2)
        } else {
            None
        }
    }
}

pub trait UniformLinearMotion {
    fn ulm_collision_time(&self, other: &Self) -> Option<f64>;
}

/// Representa un elemento de un espacio vectorial en ‚Ñù¬≤ en coordenadas cartesianas.
#[derive(Clone, Copy)]
pub struct Vector2D {
    x: f64,
    y: f64,
}

impl From<&[f64; 2]> for Vector2D {
    fn from(value: &[f64; 2]) -> Self {
        Self {
            x: value[0],
            y: value[1],
        }
    }
}

impl Mul<Vector2D> for Vector2D {
    type Output = f64;
    fn mul(self, rhs: Vector2D) -> Self::Output {
        (self.x * rhs.x) + (self.y * rhs.y)
    }
}

impl Sub for Vector2D {
    type Output = Vector2D;

    fn sub(self, rhs: Self) -> Self::Output {
        Vector2D {
            x: self.x - rhs.x,
            y: self.y - rhs.y,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn ulm_collision_time_by_axis() {
        let test_cases = [
            // same origin and velocity
            (
                [[9.0, 0.0], [60.0, 0.0], [9.0, 0.0], [60.0, 0.0]],
                Some(0.0),
            ),
            // same origin, different velocity
            (
                [[15.8, 0.0], [80.3, 0.0], [15.8, 0.0], [-50.0, 0.0]],
                Some(0.0),
            ), // different origin, same velocity
            ([[17.0, 0.0], [123.5, 0.0], [1.8, 0.0], [123.5, 0.0]], None),
            // from here, different origin and velocity
            ([[98.0, 0.0], [30.0, 0.0], [15.0, 0.0], [-42.0, 0.0]], None),
            ([[0.0, 0.0], [0.5, 0.0], [6.0, 0.0], [0.0, 0.0]], Some(12.0)),
            (
                [[-2.5, 0.0], [2.406, 0.0], [4.5, 0.0], [2.1, 0.0]],
                Some(22.8758169934),
            ),
            (
                [[12.0, 0.0], [2.7, 0.0], [179.0, 0.0], [-3.1, 0.0]],
                Some(28.7931031275),
            ),
            (
                [[-10.0, 0.0], [34.0, 0.0], [200.0, 0.0], [-36.0, 0.0]],
                Some(3.0),
            ),
        ];

        // check axis X
        for ([loc1, vel1, loc2, vel2], expected) in &test_cases {
            let object_1 = Object2D::new(loc1, vel1);
            let object_2 = Object2D::new(loc2, vel2);
            let solution = object_1.ulm_collision_time(&object_2);
            if expected.is_some() && solution.is_some() {
                assert!(
                    (expected.unwrap() - solution.unwrap()).abs() < TOLERANCE,
                    "Axis X. Expected {:?}, obtained {:?}",
                    expected,
                    solution
                )
            } else {
                assert_eq!(*expected, solution)
            };
        }

        // now check axis Y
        for ([loc1, vel1, loc2, vel2], expected) in &test_cases {
            let object_1 = Object2D::new(&[loc1[1], loc1[0]], &[vel1[1], vel1[0]]);
            let object_2 = Object2D::new(&[loc2[1], loc2[0]], &[vel2[1], vel2[0]]);
            let solution = object_1.ulm_collision_time(&object_2);
            if expected.is_some() && solution.is_some() {
                assert!(
                    (expected.unwrap() - solution.unwrap()).abs() < TOLERANCE,
                    "Axis Y. Expected {:?}, obtained {:?}",
                    expected,
                    solution
                )
            } else {
                assert_eq!(*expected, solution)
            };
        }
    }

    #[test]
    fn ulm_collision_time_bidimensional() {
        let test_cases = [
            // meet
            (
                [[6.0, 7.0], [-9.0, -3.0], [2.0, 2.0], [-5.0, 2.0]],
                Some(1.0),
            ),
            (
                [[6.0, 7.0], [-1.8, -0.6], [2.0, 2.0], [-1.0, 0.4]],
                Some(5.0),
            ),
            // never meet
            ([[6.0, 7.0], [-1.8, -0.6], [2.0, 2.0], [1.0, 0.4]], None),
        ];

        for ([loc1, vel1, loc2, vel2], expected) in &test_cases {
            let object_1 = Object2D::new(loc1, vel1);
            let object_2 = Object2D::new(loc2, vel2);
            let solution = object_1.ulm_collision_time(&object_2);
            if expected.is_some() && solution.is_some() {
                assert!(
                    (expected.unwrap() - solution.unwrap()).abs() < TOLERANCE,
                    "Expected {:?}, obtained {:?}",
                    expected,
                    solution
                )
            } else {
                assert_eq!(*expected, solution)
            };
        }
    }
}
